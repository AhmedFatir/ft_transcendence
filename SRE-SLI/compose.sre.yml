version: '3.8'

services:
  setup:
    image: setup
    build:
      context: ./ELK-Stack/setup
      dockerfile: Dockerfile
    container_name: setup
    depends_on:
      nginx:
        condition: service_healthy
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - ../.env
    networks:
      - elk-stack
    restart: always
    healthcheck:
      test: ['CMD-SHELL', '[ -f /usr/share/elasticsearch/config/certs/elasticsearch/elasticsearch.crt ]']
      interval: 1s
      timeout: 5s
      retries: 120

  elasticsearch:
    image: elasticsearch
    build:
      context: ./ELK-Stack/elasticsearch
      dockerfile: Dockerfile
    container_name: elasticsearch
    depends_on:
      setup:
        condition: service_healthy
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - elasticsearch:/usr/share/elasticsearch/data
    ports:
      - '9200:9200'
    env_file:
      - ../.env
    networks:
      - elk-stack
    restart: always
    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ['CMD-SHELL', 'curl -s -k https://elasticsearch:9200 | grep -q "missing authentication credentials"']
      interval: 5s
      timeout: 5s
      retries: 120

  kibana:
    image: kibana
    build:
      context: ./ELK-Stack/kibana
      dockerfile: Dockerfile
    container_name: kibana
    depends_on:
      setup:
        condition: service_healthy
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibana:/usr/share/kibana/data
    ports:
      - '5601:5601'
    env_file:
      - ../.env
    networks:
      - elk-stack
    restart: always
    mem_limit: ${KB_MEM_LIMIT}

  logstash:
    image: logstash
    build:
      context: ./ELK-Stack/logstash
      dockerfile: Dockerfile
    container_name: logstash
    depends_on:
      elasticsearch:
        condition: service_healthy
    volumes:
      - certs:/usr/share/logstash/config/certs
      - ../nginx/access.log:/usr/share/logstash/nginx/access.log
    env_file:
      - ../.env
    networks:
      - elk-stack
    restart: always


################################### Prom-Graf ###################################

  prometheus:
    image: prometheus
    build:
      context: ./prom-grafana/prometheus
      dockerfile: Dockerfile
    container_name: prometheus
    depends_on:
      nginx:
        condition: service_healthy
    ports:
      - "9090:9090"
      - "9093:9093"
    hostname: localhost
    env_file:
      - ../.env
    volumes:
      - prometheus:/var/lib/prometheus
      - alertmanager:/var/lib/alertmanager
    networks:
      - prom-graf
      - ft_transcendence
    restart: always

  grafana:
    image: grafana
    build:
      context: ./prom-grafana/grafana
      dockerfile: Dockerfile
    container_name: grafana
    depends_on:
      nginx:
        condition: service_healthy
    ports:
      - "3000:3000"
    env_file:
      - ../.env
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - prom-graf 
      - ft_transcendence
    restart: always

  nginx_exporter:
    image: nginx-exporter
    build:
      context: ./prom-grafana/exporters
      dockerfile: Dockerfile.nginx
    container_name: nginx-exporter
    depends_on:
      nginx:
        condition: service_healthy
    env_file:
      - ../.env
    command:
      - -nginx.scrape-uri=${NGINX_SCRAPE_URI}
    networks:
      - prom-graf
      - ft_transcendence
    restart: always

  redis-exporter:
    image: redis-exporter
    container_name: redis-exporter
    depends_on:
      nginx:
        condition: service_healthy
    build:
      context: ./prom-grafana/exporters
      dockerfile: Dockerfile.redis
    env_file:
      - ../.env
    networks:
      - prom-graf
      - ft_transcendence
    restart: always

  postgres-exporter:
    image: postgres-exporter
    container_name: postgres-exporter
    depends_on:
      nginx:
        condition: service_healthy
    build:
      context: ./prom-grafana/exporters
      dockerfile: Dockerfile.postgresql
    env_file:
      - ../.env
    networks:
      - prom-graf
      - ft_transcendence
    restart: always

  node-exporter:
    image: node-exporter
    container_name: node-exporter
    depends_on:
      nginx:
        condition: service_healthy
    build:
      context: ./prom-grafana/exporters
      dockerfile: Dockerfile.node
    networks:
      - prom-graf
      - ft_transcendence
    restart: always